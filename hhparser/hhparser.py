from typing import List, Dictimport pandas as pdimport requestsimport concurrent.futuresclass HHParser:	"""	Парсер вакансий	"""		def __init__(self, url: str):		self.url = url		@staticmethod	def execute_vacancies(			vacancies: List[Dict[str, str]] or List[Dict[Dict[str, str], str]]	) -> (List[List[str]]):		"""		Обработка вакансий		:param vacancies: вакансии		:return: вакансии		"""		if len(vacancies) == 0:			return []				return [			[				vacancy["name"],				vacancy["area"]["name"],				vacancy["salary"]["from"],				vacancy["salary"]["to"],				vacancy["salary"]["currency"],				vacancy["published_at"],			]			for vacancy in vacancies			if vacancy["salary"]		]		def get_vacancies(			self, params: dict	) -> (List[Dict[str, str]] or List[Dict[Dict[str, str], str]]):		"""		Получение вакансий		:param params: критерии		:return: вакансии		"""		return requests.get(self.url, params).json()["items"]if __name__ == "__main__":	num_pages = 20	params1 = [		dict(			specialization=1,			date_from="2022-12-05T00:00:00",			date_to="2022-12-05T12:00:00",			per_page=100,			page=i,		)		for i in range(num_pages)	]		params2 = [		dict(			specialization=1,			date_from="2022-12-05T00:12:00",			date_to="2022-12-06T00:00:00",			per_page=100,			page=i,		)		for i in range(num_pages)	]		parser = HHParser("https://api.hh.ru/vacancies")		with concurrent.futures.ProcessPoolExecutor() as executor:		result = list(executor.map(parser.get_vacancies, params1 + params2))		response = list(executor.map(parser.execute_vacancies, result))		result = pd.concat(			[				pd.DataFrame(					el,					columns=[						"name",						"salary_from",						"salary_to",						"salary_currency",						"area_name",						"published_at",					],				)				for el in response			]		)		result.to_csv("vacancies_from_hh.csv", index=False)